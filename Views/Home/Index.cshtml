
@{
    // Views are generally returned from an action method.
    // We use ViewResult type to return a view from an action method.

    // A View is responsible from UI, application data representation.
    // Information is displayed in the website using views.
    // A user performs all the actions on a view.
    // Like, click on a button, filling form, listing other UI elements.

    // Views are available inside Views folder at the root.
    // Views are grouped into folder named with application controllers.
    // They are also grouped based on their features.

    ViewData["Title"] = "Home";

    // ViewData works with ViewDataDictionary type. Hence, while
    // sending an object is should be casted to data type.
    // It can also be used to pass data from view to layout.
    var book = ViewData["book"] as BookModel;

    // This data is defined to view with ViewData Attribute.
    var customBook = ViewData["CustomBook"] as BookModel;

    // All static files are placed inside wwwroot folder.
    // This folder also known as Content Root folder and
    // must be places at the root level.

    // Environment tag helper is used to render some
    // content based on current environment such as,
    // Development, Staging, Production or any custom.
    // Environment tag attributes: names, include, exclude
}
@inject Tutorial.Repository.IBookRepository _bookRepository
@inject Microsoft.Extensions.Configuration.IConfiguration _configuration
@inject Microsoft.Extensions.Options.IOptions<NewBookAlertConfig> _newBookAlertConfiguration
@inject Microsoft.Extensions.Options.IOptionsSnapshot<NewBookAlertConfig> _newBookAlertConfigurationShapshot

<img src="~/images/logo.png" alt="logo" class="logo" />
<img src="~/MyStaticFiles/dummy.png" alt="dummy" class="logo" />

<environment names="Development">
    <p>This is the home page of our tutorial. (Development)</p>
</environment>
<environment names="Development, Production, Staging">
    <p>This is the home page of our tutorial. (All)</p>
</environment>
<environment include="Development, Production">
    <p>Show in Development and Production.</p>
</environment>
<environment exclude="Production">
    <p>Do not show in Production.</p>
</environment>

<input type="button" id="btn" value="Click Me!" class="btn btn-danger" />

@{
    // Section is used on Views.
    // To create a section use @section directive.
    // Each section has a unique name and whatever
    // we will write inside this section block that
    // will replace the RenderSection with same name.
}
@section scripts{
    <script>
        $(document).ready(() => {
            $("#btn").prop("value", "Button text with jquery.");
        });
    </script>
}

<br />
Title: @ViewBag.Title
<br />
Id, Name: @ViewBag.Data.Id @ViewBag.Data.Name
<br />
BookModel: @ViewBag.Type.Id @ViewBag.Type.Author

<br />
Name: @ViewData["name"]
<br />
Book: @book.Id @book.Author

<br />
CustomProperty: @ViewData["CustomProperty"]
<br />
CustomTitle: @ViewData["CustomTitle"]
<br />
CustomBook: @customBook.Id @customBook.Author 

<br />
<big>Big using tag.</big>
<p big>Big using attribute.</p>

<br />
@foreach (var item in await _bookRepository.GetAllBooks())
{
    <h2>@item.Title</h2>
}

<br />
@ViewBag.Key1
<br />
@ViewBag.Key2
<br />
@ViewBag.Key3

<br />
@_configuration["AppName"]

<br />
@ViewBag.NewBookAlert
@ViewBag.Message

<br />
@if (_configuration.GetValue<bool>("NewBookAlert:DisplayNewBookAlert"))
{
    <div class="alert alert-info" role="alert">
        @(_configuration.GetValue<string>("NewBookAlert:Message"))
    </div>
}

<br />
@ViewBag.NewBookAlert2
@ViewBag.Message2

<br />
@{ 
    var alert = _configuration.GetSection("NewBookAlert");
}
@if (alert.GetValue<bool>("DisplayNewBookAlert"))
{
    <div class="alert alert-info" role="alert">
        @(alert.GetValue<string>("Message"))
    </div>
}

<br />
@ViewBag.NewBookAlert3.DisplayNewBookAlert
@ViewBag.NewBookAlert3.Message

<br />
@{ 
    var newBookAlert = new NewBookAlertConfig();
    _configuration.Bind("NewBookAlert", newBookAlert);
}
@if (newBookAlert.DisplayNewBookAlert)
{
    <div class="alert alert-info" role="alert">
        @(newBookAlert.Message)
    </div>
}

<br />
@ViewBag.NewBookAlert4.DisplayNewBookAlert
@ViewBag.NewBookAlert4.Message

<br />
@{ 
    var newBookAlertConfiguration = _newBookAlertConfiguration.Value;
}

@if (newBookAlertConfiguration.DisplayNewBookAlert)
{
    <div class="alert alert-info" role="alert">
        @(newBookAlertConfiguration.Message)
    </div>
}

<br />
@ViewBag.NewBookAlert5.DisplayNewBookAlert
@ViewBag.NewBookAlert5.Message

<br />
@{ 
    var newBookAlertConfigurationShapshot = _newBookAlertConfigurationShapshot.Value;
}

@if (newBookAlertConfigurationShapshot.DisplayNewBookAlert)
{
    <div class="alert alert-info" role="alert">
        @(newBookAlertConfigurationShapshot.Message)
    </div>
}

<br />
@ViewBag.Message3
<br />
@ViewBag.Message4
<br />
@ViewBag.Message5

<br />
@ViewBag.NewBookAlert6.DisplayNewBookAlert
@ViewBag.NewBookAlert6.Message

<br />
@{ 
    var thirdPartyBookConfiguration = _newBookAlertConfigurationShapshot.Get("ThirdPartyBook");
}
@if (thirdPartyBookConfiguration.DisplayNewBookAlert)
{
    <div class="alert alert-info" role="alert">
        @(thirdPartyBookConfiguration.Message)
    </div>
}


